package com.chy.qrcode.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SWEEP__RECORD".
*/
public class SWEEP_RECORDDao extends AbstractDao<SWEEP_RECORD, Long> {

    public static final String TABLENAME = "SWEEP__RECORD";

    /**
     * Properties of entity SWEEP_RECORD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Context = new Property(1, String.class, "context", false, "CONTEXT");
        public final static Property Tpye = new Property(2, Integer.class, "tpye", false, "TPYE");
        public final static Property Create_time = new Property(3, String.class, "create_time", false, "CREATE_TIME");
    }


    public SWEEP_RECORDDao(DaoConfig config) {
        super(config);
    }
    
    public SWEEP_RECORDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SWEEP__RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CONTEXT\" TEXT NOT NULL ," + // 1: context
                "\"TPYE\" INTEGER," + // 2: tpye
                "\"CREATE_TIME\" TEXT);"); // 3: create_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SWEEP__RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SWEEP_RECORD entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getContext());
 
        Integer tpye = entity.getTpye();
        if (tpye != null) {
            stmt.bindLong(3, tpye);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(4, create_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SWEEP_RECORD entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getContext());
 
        Integer tpye = entity.getTpye();
        if (tpye != null) {
            stmt.bindLong(3, tpye);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(4, create_time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SWEEP_RECORD readEntity(Cursor cursor, int offset) {
        SWEEP_RECORD entity = new SWEEP_RECORD( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // context
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // tpye
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // create_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SWEEP_RECORD entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContext(cursor.getString(offset + 1));
        entity.setTpye(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCreate_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SWEEP_RECORD entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SWEEP_RECORD entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SWEEP_RECORD entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
